{"paragraphs":[{"title":"Create SparkSession","text":"%pyspark\nfrom pyspark.sql import SparkSession\n\nsparkSession = SparkSession.builder.appName(\"example-pyspark-read-and-write\").getOrCreate()","user":"admin","dateUpdated":"2018-07-29T13:54:06+0300","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1532782653743_-1898700265","id":"20180728-155733_508741959","dateCreated":"2018-07-28T15:57:33+0300","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:25274","dateFinished":"2018-07-29T13:54:07+0300","dateStarted":"2018-07-29T13:54:07+0300","results":{"code":"SUCCESS","msg":[]}},{"title":"Prepare data","text":"%pyspark\nfrom pyspark.sql.functions import col\n\n# load original records\ndf_load = sparkSession.read.parquet('/endSyr527')\n\n# load antennas\nmstr_profile = sparkSession.read.parquet(\"/mstr/antenna_.parquet\") \n# filter anntenna\nfiltered = mstr_profile.filter((col(\"since\") <= \"2018-04-01 00:00:00\") & (col(\"to\") >= \"2018-03-01 00:00:00\")).distinct()\n\n# prepare records with antennas\nend = df_load.join(filtered, col(\"antenna_id\")  == col(\"SITE_CODE\")).select(col(\"interaction\"), col(\"direction\"), col(\"correspondent_id\"), col(\"datetime\"), col(\"call_duration\"), col(\"GSM\"), col(\"antenna_id\"), col(\"LATITUDE\").alias(\"latitude\"),col(\"LONGITUDE\").alias(\"longitude\")).distinct()\n\nend.show()","user":"admin","dateUpdated":"2018-07-29T13:54:18+0300","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----------+---------+----------------+-------------------+-------------+--------+----------+--------+---------+\n|interaction|direction|correspondent_id|           datetime|call_duration|     GSM|antenna_id|latitude|longitude|\n+-----------+---------+----------------+-------------------+-------------+--------+----------+--------+---------+\n|       text|       in|    963993995348|2018-03-19 13:59:15|        0    |93995271|  DA1150C1| 33.4398| 36.26113|\n|       text|       in|     41707064332|2018-03-09 17:52:00|        0    |93995276|  DA1150C1| 33.4398| 36.26113|\n|       call|      out|    963992417178|2018-03-14 21:34:31|        00116|93995273|  DA0170C2|33.54472| 36.32167|\n|       text|       in|     41707064332|2018-03-07 12:01:39|        0    |93995276|  DA1150C1| 33.4398| 36.26113|\n|       call|      out|    963993995409|2018-03-15 14:57:32|        00025|93995276|  DA1150C1| 33.4398| 36.26113|\n|       call|      out|    963991785558|2018-03-19 13:28:01|        00015|93995276|  DA1368C1| 33.5128|  36.2882|\n|       call|       in|    963993995409|2018-03-20 15:12:40|        00042|93995276|  DA1150C1| 33.4398| 36.26113|\n|       call|       in|    963993992951|2018-03-14 12:34:36|        00073|93995274|  DA1150C1| 33.4398| 36.26113|\n|       text|       in|        31333333|2018-03-02 15:44:41|        0    |93995271|  DA0103C1|33.79972|    36.15|\n|       text|       in|     41707064332|2018-03-09 17:59:10|        0    |93995276|  DA1150C1| 33.4398| 36.26113|\n|       call|      out|    963993995627|2018-03-26 14:09:47|        00050|93995271|  DA0020C1|33.44361| 36.26611|\n|       call|       in|    963993997359|2018-03-06 10:21:44|        00009|93995276|  DA1150C1| 33.4398| 36.26113|\n|       call|       in|    963993995859|2018-03-26 13:45:54|        00093|93995271|  DA1840C1|33.49356| 36.31525|\n|       call|       in|    963992306498|2018-03-14 15:31:06|        00013|93995273|  DA1150C1| 33.4398| 36.26113|\n|       call|       in|    963993998215|2018-03-23 13:09:56|        01084|93995271|  DA0203C3| 33.4975| 36.33222|\n|       call|       in|    963993998215|2018-03-20 08:15:09|        00055|93995271|  DA0809C3|33.43538| 36.26048|\n|       text|       in|     41707064332|2018-03-09 18:53:30|        0    |93995276|  DA1150C1| 33.4398| 36.26113|\n|       call|      out|    963932760361|2018-03-01 23:52:00|        00051|93995271|  DA0815C2|33.81339| 36.16105|\n|       text|       in|        31363336|2018-03-22 14:47:50|        0    |93995271|  DA0203C3| 33.4975| 36.33222|\n|       call|       in|    963993995648|2018-03-16 19:54:34|        00104|93995274|  DA0019C1|33.49667| 36.30667|\n+-----------+---------+----------------+-------------------+-------------+--------+----------+--------+---------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1532782715855_249611711","id":"20180728-155835_1237112837","dateCreated":"2018-07-28T15:58:35+0300","dateStarted":"2018-07-29T13:54:18+0300","dateFinished":"2018-07-29T13:55:07+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:25275"},{"title":"Collect records and antennas for every GSM","text":"%pyspark\nfrom pyspark.sql import functions as F\n\ndata_frame = end.groupBy('GSM').agg(F.collect_list(F.struct(\"interaction\",\"direction\",\"correspondent_id\",\"datetime\",\"call_duration\",\"antenna_id\")).alias(\"BC_records\"), F.collect_list(F.struct(\"antenna_id\",\"latitude\",\"longitude\")).alias(\"BC_antennas\")) \ndata_frame.show()\n# z.show(data_frame)","user":"admin","dateUpdated":"2018-07-29T13:55:24+0300","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+--------+--------------------+--------------------+\n|     GSM|          BC_records|         BC_antennas|\n+--------+--------------------+--------------------+\n|93995276|[[call,in,9639939...|[[DA1150C1,33.439...|\n|93995273|[[call,in,9639923...|[[DA1150C1,33.439...|\n|93995271|[[call,out,963993...|[[DA1150C1,33.439...|\n|93995274|[[text,in,5379726...|[[DA0241C2,33.505...|\n+--------+--------------------+--------------------+\n\n"}]},"apps":[],"jobName":"paragraph_1532782877658_646134585","id":"20180728-160117_608157782","dateCreated":"2018-07-28T16:01:17+0300","dateStarted":"2018-07-29T13:55:24+0300","dateFinished":"2018-07-29T13:56:09+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:25276"},{"title":"fun: Extract features from Bandicoot user","text":"%pyspark\nimport bandicoot as bc\nfrom datetime import datetime\n\n\ndef loaduser(user, recordslist, antennaslist):\n    # prepare user's records\n    band_rec= []\n    for x in recordslist:\n        band_rec.append(bc.Record(x['interaction'], x['direction'], x['correspondent_id'], datetime.strptime(x['datetime'],\"%Y-%m-%d %H:%M:%S\"), float(x['call_duration']), bc.Position(x['antenna_id'])))\n    \n    # prepare user's antennas    \n    antennas = {str(x['antenna_id']) :(0 if str(x['latitude']) is None else float(str(x['latitude'])), 0 if str(x['longitude']) is None else float(str(x['longitude']))) for x in antennaslist}\n    \n    attrs = {}\n    \n    # load bandicoot user\n    user_rec = bc.io.load(user, band_rec, antennas, attrs)\n    \n    # edit user weekend\n    bc_user = user_rec[0]\n    bc_user.weekend=[5,6]\n    \n    # return user's features\n    return bc.utils.all(bc_user, summary='extended', split_week=True, split_day=True)","user":"admin","dateUpdated":"2018-07-29T13:56:22+0300","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1532783010491_-1626794995","id":"20180728-160330_1016748170","dateCreated":"2018-07-28T16:03:30+0300","dateStarted":"2018-07-29T13:56:22+0300","dateFinished":"2018-07-29T13:56:22+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:25277"},{"title":"Main processin for all GSM","text":"%pyspark\n\ndf_q = data_frame.rdd.map(lambda x: loaduser(x['GSM'],x['BC_records'],x['BC_antennas'])).collect()","user":"admin","dateUpdated":"2018-07-29T13:56:26+0300","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1532783087943_766651292","id":"20180728-160447_1663189008","dateCreated":"2018-07-28T16:04:47+0300","dateStarted":"2018-07-29T13:56:26+0300","dateFinished":"2018-07-29T13:56:55+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:25278"},{"title":"fun: Write users' features","text":"%pyspark\n\nimport bandicoot as bc\nfrom pyspark.sql import SparkSession\n\nsc.addPyFile(\"/usr/lib/python2.7/site-packages/bandicoot/utils.py\")\nfrom utils import flatten\n\ndef to_csv(objects, filename, digits=5, warnings=True):\n    rows = []\n    if not isinstance(objects, list):\n        objects = [objects]\n\n    data = [flatten(obj) for obj in objects]\n    all_keys = [d for datum in data for d in datum.keys()]\n    field_names = sorted(set(all_keys), key=lambda x: all_keys.index(x))\n    # print field_names\n    rows.append(field_names)\n    \n    def make_repr(item):\n        if item is None:\n            return None\n        elif isinstance(item, float):\n            return repr(round(item, digits))\n        else:\n            return str(item)\n    for row in data:\n        row = dict((k, make_repr(v)) for k, v in row.items())\n        rows.append([make_repr(row.get(k, None)) for k in field_names])\n    \n    df = sparkSession.createDataFrame(rows)\n    df.write.mode('overwrite').csv(filename)\n    \n    if warnings:\n        print(\"Successfully exported {} object(s) to {}\".format(len(objects),\n              filename))","user":"admin","dateUpdated":"2018-07-29T13:56:58+0300","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"apps":[],"jobName":"paragraph_1532783312773_1771830252","id":"20180728-160832_1557447149","dateCreated":"2018-07-28T16:08:32+0300","dateStarted":"2018-07-29T13:56:58+0300","dateFinished":"2018-07-29T13:56:58+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:25279"},{"title":"Write final result","text":"%pyspark\nto_csv(df_q,\"/Mhdbashar/bandicootv527x\")","user":"admin","dateUpdated":"2018-07-29T13:59:32+0300","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"python"},"editorMode":"ace/mode/python","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"Successfully exported 4 object(s) to /Mhdbashar/bandicootv527x\n"}]},"apps":[],"jobName":"paragraph_1532783468943_-835750962","id":"20180728-161108_2101389399","dateCreated":"2018-07-28T16:11:08+0300","dateStarted":"2018-07-29T13:59:32+0300","dateFinished":"2018-07-29T13:59:51+0300","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:25280"},{"text":"%pyspark\n","user":"admin","dateUpdated":"2018-07-28T16:16:26+0300","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1532783786506_708057551","id":"20180728-161626_1300225823","dateCreated":"2018-07-28T16:16:26+0300","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:25281"}],"name":"/Mhdbashar/bandicoot_v3","id":"2DJY51RGY","angularObjects":{"2CHS8UYQQ:shared_process":[],"2DBNMQPSW:shared_process":[],"2D9RT93S5:shared_process":[],"2CKX6DGQZ:shared_process":[],"2C8A4SZ9T_livy2:shared_process":[],"2CK8A9MEG:shared_process":[],"2C4U48MY3_spark2:shared_process":[],"2CKX8WPU1:shared_process":[],"2CKAY1A8Y:shared_process":[],"2CKEKWY8Z:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}